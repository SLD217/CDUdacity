version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            exit 1

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end cd
          command: |
            # Your code here
            cd frontend &&
            npm install &&
            npm run build         
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend &&
            npm install &&
            npm run build     
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: frontend test
          command: |
            cd frontend &&
            npm install &&
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test
      # Checkout code from git
      # Restore from cache
      # Your job code here
                
  test-backend:
    docker:
      # Docker image here
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: backend test
          command: |
            cd backend &&
            npm install &&
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      # Checkout code from git
      # Restore from cache
      # Your job code here
            
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: front-end scan
          command: |
            cd frontend &&
            npm install &&
            npm audit fix --audit-level=critical --force &&
            npm audit fix --force &&
            npm audit --audit-level=critical     
          # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again   
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      # Checkout code from git
      # Restore from cache
      # Your job code here

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
            cd backend &&
            npm install &&
            npm audit fix --audit-level=critical --force &&
            npm audit fix --force &&
            npm audit --audit-level=critical     
          # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
              aws ec2 describe-instances \
              --filters "Name=tag:Project, Values=udapeople" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> $CIRCLE_WORKING_DIRECTORY/inventory.txt
      - persist_to_workspace:
          root: $CIRCLE_WORKING_DIRECTORY
          paths:
            - inventory.txt
      - run:
          name: Destroy environment
            # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
            # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} &&
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 


  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: circleci/python:3.9
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
              # You can get this ID in the section where you registered the SSH Key
              fingerprints: ["f1:2f:b5:8d:21:5e:2b:39:28:b5:4a:61:4b:f7:61:bc"] 
      # attach workspace
      - attach_workspace:
          # Must be absolute path or relative path from working_directory
          at: $CIRCLE_WORKING_DIRECTORY
      - run:
          name: Install Ansible
          command: |
            sudo apt-get update && \
            # sudo apt-get install -y software-properties-common && \
            # sudo apt-add-repository -y ppa:ansible/ansible && \
            # sudo apt-get update && \
            sudo apt-get install -y ansible
      - run:
          name: Verify Ansible installation
          command: ansible --version
      - run:
          name: Install AWS CLI
          command: |
            sudo apt-get update && \
            sudo apt-get install -y python3-pip && \
            sudo pip3 install awscli
      - run:
          name: Verify AWS CLI installation
          command: aws --version
      - run:
          name: Install tar
          command: |
            sudo apt-get update && \
            sudo apt-get install -y tar
      - run:
          name: Verify tar installation
          command: tar --version
      - run:
          name: Install gzip
          command: |
            sudo apt-get update && \
            sudo apt-get install -y gzip
      - run:
          name: Verify gzip installation
          command: gzip --version
      - run:
          name: Configure server
          command: |
            ansible-playbook -i "$CIRCLE_WORKING_DIRECTORY/inventory.txt" "\.circleci\configure-server.yml"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
    docker:
      # Docker image here
      - image: cimg/node:19.7.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]
      - configure-infrastructure
          requires: [deploy-infrastructure]
#      - run-migrations:
#          requires: [configure-infrastructure]
#      - deploy-frontend:
#          requires: [run-migrations]
#      - deploy-backend:
#          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
#      - cloudfront-update:
#          requires: [smoke-test]
#      - cleanup:
#          requires: [cloudfront-update]